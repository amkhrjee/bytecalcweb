{"version":3,"file":"calculator.js","sources":["../js/calculator.js"],"sourcesContent":["// Code inspiration: Crafting Interpreters by Robert Nystrom (https://craftinginterpreters.com/)\nexport var TokenType;\n(function (TokenType) {\n    // ONE-CHARACTER\n    TokenType[TokenType[\"LEFT_PAREN\"] = 0] = \"LEFT_PAREN\";\n    TokenType[TokenType[\"RIGHT_PAREN\"] = 1] = \"RIGHT_PAREN\";\n    TokenType[TokenType[\"DOT\"] = 2] = \"DOT\";\n    TokenType[TokenType[\"MINUS\"] = 3] = \"MINUS\";\n    TokenType[TokenType[\"PLUS\"] = 4] = \"PLUS\";\n    TokenType[TokenType[\"SLASH\"] = 5] = \"SLASH\";\n    TokenType[TokenType[\"CROSS\"] = 6] = \"CROSS\";\n    TokenType[TokenType[\"PERCENT\"] = 7] = \"PERCENT\";\n    TokenType[TokenType[\"EQUAL\"] = 8] = \"EQUAL\";\n    TokenType[TokenType[\"EXPONENT\"] = 9] = \"EXPONENT\";\n    TokenType[TokenType[\"END\"] = 10] = \"END\";\n    // Literals\n    TokenType[TokenType[\"NUMBER\"] = 11] = \"NUMBER\";\n    // Keywords\n    TokenType[TokenType[\"MOD\"] = 12] = \"MOD\";\n    TokenType[TokenType[\"LOG_TWO\"] = 13] = \"LOG_TWO\";\n})(TokenType || (TokenType = {}));\nexport class Token {\n    constructor(type, lexeme, literal) {\n        this.toString = () => {\n            return TokenType[this.type] + \": \" + this.lexeme + \" \" + this.literal;\n        };\n        this.type = type;\n        this.lexeme = lexeme;\n        this.literal = literal;\n    }\n}\nexport class Scanner {\n    constructor(src) {\n        this.source = src;\n        this.start = 0;\n        this.current = 0;\n        this.tokens = [];\n    }\n    scanTokens() {\n        while (this.current < this.source.length) {\n            this.start = this.current;\n            this.scanToken();\n        }\n        this.tokens.push(new Token(TokenType.END, \"\", null));\n        /* Check for implicit multiplications\n          Scenarios:\n              1. <num>(\n              2. )(\n              3. )<num>\n              4. <num>log\n              5. )log\n        */\n        let currentIndex = 0;\n        this.tokens.forEach((token) => {\n            if (currentIndex > 0) {\n                if (token.type == TokenType.LEFT_PAREN ||\n                    token.type == TokenType.LOG_TWO) {\n                    let previousIndex = currentIndex - 1;\n                    if (this.tokens[previousIndex].type == TokenType.NUMBER ||\n                        this.tokens[previousIndex].type == TokenType.RIGHT_PAREN) {\n                        this.addCrossAt(currentIndex);\n                    }\n                }\n                else if (token.type == TokenType.RIGHT_PAREN) {\n                    let nextIndex = currentIndex + 1;\n                    if (this.tokens[nextIndex].type == TokenType.NUMBER ||\n                        this.tokens[nextIndex].type == TokenType.LEFT_PAREN) {\n                        this.addCrossAt(currentIndex + 1);\n                    }\n                }\n            }\n            currentIndex += 1;\n        });\n        return this.tokens;\n    }\n    addCrossAt(indexToInsertAt) {\n        this.tokens.splice(indexToInsertAt, 0, new Token(TokenType.CROSS, \"\", null));\n        indexToInsertAt += 2;\n    }\n    scanToken() {\n        let singleChar = this.advanceChar();\n        switch (singleChar) {\n            case \"(\":\n                this.addToken(TokenType.LEFT_PAREN, null);\n                break;\n            case \")\":\n                this.addToken(TokenType.RIGHT_PAREN, null);\n                break;\n            case \".\":\n                this.addToken(TokenType.DOT, null);\n                break;\n            case \"-\":\n                this.addToken(TokenType.MINUS, null);\n                break;\n            case \"+\":\n                this.addToken(TokenType.PLUS, null);\n                break;\n            case \"Ã—\":\n                this.addToken(TokenType.CROSS, null);\n                break;\n            case \"%\":\n                this.addToken(TokenType.PERCENT, null);\n                break;\n            case \"/\":\n                this.addToken(TokenType.SLASH, null);\n                break;\n            case \"=\":\n                this.addToken(TokenType.EQUAL, null);\n                break;\n            case \"^\":\n                this.addToken(TokenType.EXPONENT, null);\n                break;\n            case \"l\":\n                this.current += 3;\n                this.addToken(TokenType.LOG_TWO, null);\n                break;\n            case \"m\":\n                this.current += 2;\n                this.addToken(TokenType.MOD, null);\n                break;\n            default:\n                while (this.isDigit(this.peek()))\n                    this.advanceChar();\n                // Look for fractional part\n                if (this.peek() == \".\" && this.isDigit(this.peekNext())) {\n                    this.advanceChar();\n                    while (this.isDigit(this.peek()))\n                        this.advanceChar();\n                }\n                this.addToken(TokenType.NUMBER, parseFloat(this.source.substring(this.start, this.current)));\n        }\n    }\n    advanceChar() {\n        return this.source.charAt(this.current++);\n    }\n    addToken(type, literal) {\n        let text = this.source.substring(this.start, this.current);\n        this.tokens.push(new Token(type, text, literal));\n    }\n    peek() {\n        if (this.current < this.source.length)\n            return this.source.charAt(this.current);\n        else\n            return null;\n    }\n    isDigit(char) {\n        return !isNaN(parseInt(char));\n    }\n    peekNext() {\n        if (this.current + 1 < this.source.length)\n            return this.source.charAt(this.current + 1);\n        else\n            return null;\n    }\n}\nclass Expr {\n}\nclass Binary extends Expr {\n    constructor(left, operator, right) {\n        super();\n        this.left = left;\n        this.operator = operator;\n        this.right = right;\n    }\n    accept(visitor) {\n        return visitor.visitBinaryExpr(this);\n    }\n}\nclass Grouping extends Expr {\n    constructor(expression) {\n        super();\n        this.expression = expression;\n    }\n    accept(visitor) {\n        return visitor.visitGroupingExpr(this);\n    }\n}\nclass Literal extends Expr {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    accept(visitor) {\n        return visitor.visitLiteralExpr(this);\n    }\n}\nclass Unary extends Expr {\n    constructor(operator, right) {\n        super();\n        this.operator = operator;\n        this.right = right;\n    }\n    accept(visitor) {\n        return visitor.visitUnaryExpr(this);\n    }\n}\nexport class Parser {\n    constructor(tokens) {\n        this.tokens = [];\n        this.current = 0;\n        this.tokens = tokens;\n    }\n    parse() {\n        console.log(\"Parsing\");\n        try {\n            return this.expression();\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    expression() {\n        return this.percentage();\n    }\n    percentage() {\n        let expr = this.term();\n        if (this.match(TokenType.PERCENT)) {\n            let operator = this.previous();\n            let right = this.term();\n            expr = new Binary(expr, operator, right);\n        }\n        return expr;\n    }\n    term() {\n        let expr = this.factor();\n        while (this.match(TokenType.PLUS, TokenType.MINUS)) {\n            let operator = this.previous();\n            let right = this.factor();\n            expr = new Binary(expr, operator, right);\n        }\n        return expr;\n    }\n    factor() {\n        let expr = this.exponent();\n        while (this.match(TokenType.SLASH, TokenType.CROSS, TokenType.MOD)) {\n            let operator = this.previous();\n            let right = this.exponent();\n            expr = new Binary(expr, operator, right);\n        }\n        return expr;\n    }\n    exponent() {\n        let expr = this.unary();\n        while (this.match(TokenType.EXPONENT)) {\n            let operator = this.previous();\n            let right = this.exponent();\n            expr = new Binary(expr, operator, right);\n        }\n        return expr;\n    }\n    unary() {\n        if (this.match(TokenType.MINUS, TokenType.LOG_TWO)) {\n            let operator = this.previous();\n            let expr = this.unary();\n            return new Unary(operator, expr);\n        }\n        else\n            return this.primary();\n    }\n    primary() {\n        if (this.match(TokenType.NUMBER)) {\n            return new Literal(this.previous().literal);\n        }\n        if (this.match(TokenType.LEFT_PAREN)) {\n            let expr = this.expression();\n            this.consume(TokenType.RIGHT_PAREN, \"Missing )\");\n            return new Grouping(expr);\n        }\n        throw Error(\"Format Error\");\n    }\n    match(...types) {\n        for (let type of types) {\n            if (this.check(type)) {\n                this.advance();\n                return true;\n            }\n        }\n        return false;\n    }\n    check(type) {\n        if (this.isAtEnd())\n            return false;\n        return this.peek().type == type;\n    }\n    advance() {\n        if (!this.isAtEnd())\n            this.current += 1;\n        return this.previous();\n    }\n    isAtEnd() {\n        return this.tokens[this.current].type == TokenType.END;\n    }\n    peek() {\n        return this.tokens[this.current];\n    }\n    previous() {\n        return this.tokens[this.current - 1];\n    }\n    consume(type, message) {\n        if (this.check(type))\n            return this.advance();\n        throw Error(message);\n    }\n}\nexport class Interpreter {\n    visitBinaryExpr(expr) {\n        let left = this.evaluate(expr.left);\n        let right = this.evaluate(expr.right);\n        try {\n            switch (expr.operator.type) {\n                case TokenType.PLUS:\n                    return left + right;\n                case TokenType.MINUS:\n                    return left - right;\n                case TokenType.SLASH:\n                    return left / right;\n                case TokenType.CROSS:\n                    return left * right;\n                case TokenType.MOD:\n                    return left % right;\n                case TokenType.EXPONENT:\n                    return Math.pow(left, right);\n                case TokenType.PERCENT:\n                    return (left / right) * 100;\n                default:\n                    return null;\n            }\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    visitGroupingExpr(expr) {\n        return this.evaluate(expr.expression);\n    }\n    visitLiteralExpr(expr) {\n        return expr.value;\n    }\n    visitUnaryExpr(expr) {\n        let right = this.evaluate(expr.right);\n        switch (expr.operator.type) {\n            case TokenType.MINUS:\n                return -right;\n            case TokenType.LOG_TWO:\n                return Math.log2(right);\n            default:\n                return null;\n        }\n    }\n    interpret(expr) {\n        let value = this.evaluate(expr);\n        return value;\n    }\n    evaluate(expr) {\n        return expr.accept(this);\n    }\n}\n"],"names":[],"mappings":"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"}